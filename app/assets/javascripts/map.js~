// Generated by CoffeeScript 1.4.0
var log, map, markerArray;
log = console.log.bind(console);
map = "";

markerArray = [];

function HomeControl(controlDiv, map) {

  // Set CSS styles for the DIV containing the control
  // Setting padding to 5 px will offset the control
  // from the edge of the map.
  controlDiv.style.padding = '5px';

  // Set CSS for the control border.
  var controlUI = document.createElement('div');
  controlUI.style.backgroundColor = 'white';
  controlUI.style.borderStyle = 'solid';
  controlUI.style.borderWidth = '2px';
  controlUI.style.cursor = 'pointer';
  controlUI.style.textAlign = 'center';
  controlUI.title = 'Click to set the map to Home';
  controlDiv.appendChild(controlUI);

  // Set CSS for the control interior.
  var controlText = document.createElement('div');
  controlText.style.fontFamily = 'Arial,sans-serif';
  controlText.style.fontSize = '12px';
  controlText.style.paddingLeft = '4px';
  controlText.style.paddingRight = '4px';
  controlText.innerHTML = '<strong>Home</strong>';
  controlUI.appendChild(controlText);

  // Setup the click event listeners: simply set the map to Chicago.
  google.maps.event.addDomListener(controlUI, 'click', function() {
	  alert("TEST")
    map.setCenter(new google.maps.LatLng(35.685222, 139.729387))
  });
}
function SelectVisibleObjectControl(controlDiv, map) {

  // Set CSS styles for the DIV containing the control
  // Setting padding to 5 px will offset the control
  // from the edge of the map.

  var controlUI = document.createElement('div');
  controlUI.className = "btn-group"
  controlDiv.appendChild(controlUI);

  var buttonUI = document.createElement("button");
  buttonUI.className = "btn btn-default";
  buttonUI.value = "Left"
  buttonUI.setAttribute("type", "button")
  controlUI.appendChild(buttonUI)
  
  var buttonUI2 = document.createElement("button");
  buttonUI2.className = "btn btn-default"
  buttonUI.value = "Right"
  buttonUI2.setAttribute("type", "button")
  controlUI.appendChild(buttonUI2)

  // Setup the click event listeners: simply set the map to Chicago.
  google.maps.event.addDomListener(buttonUI, 'click', function() {
	  alert("UI1")
	  test()
  });
}

function test(){
	$.post("/pages/map/load",
			{ name: "John", time: "2pm" },
			function(data){
				alert("Data Loaded " + data);
			}
		  );
}
window.onload = function() {
  rangeStart = 0;
  rangeEnd = 100;
  mapJS = {
    init: function() {
      var latlng, myOptions;
      latlng = new google.maps.LatLng(35.685222, 139.729387);
      myOptions = {
        zoom: 17,
        center: latlng,
		navigationControl: false,
		panControl: false,
		mapTypeControl: true,
		mapTypeControlOptions: {
			style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
		},
		zoomControl: true,
		zoomControlOptions: {
			style: google.maps.ZoomControlStyle.SMALL
		},
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      map = new google.maps.Map(document.getElementById("map"), myOptions);
	  
	  var homeControlDiv = document.createElement('div');
	  var homeControl = new HomeControl(homeControlDiv, map);

	  homeControlDiv.index = 1;
	  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(homeControlDiv);
	  //Iwasawa Add Script
	  // Custumize Style
		
	  var testDiv = document.createElement('div');
	  var testControl = new SelectVisibleObjectControl(testDiv,map);
	  
	  map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(testDiv);
	  var baseOptions = [{
		featureType:'all',
		elementType:'geometry',
		stylers:[
			{visibility:'on'},
			{hue:'#00040f'},
			{saturation:'-100'},
			{lightness: '-20'},
			{gamma:'0.2'}
		]
	  },{
		featureType:'all',
		elementType:'labels',
		stylers:[
			{visibility:'off'},
		]
	  }];
	  map.setOptions({styles:baseOptions});

    },
    drawLine: function(from, to, color) {
      var lineAry, polyline;
      lineAry = [new google.maps.LatLng(from.lat, from.lng), new google.maps.LatLng(to.lat, to.lng)];
      polyline = new google.maps.Polyline({
        path: lineAry,
        strokeColor: color,
        strokeOpacity: 1.0,
        strokeWeight: 5
      });
      polyline.setMap(map);
      polylineStack.push(polyline);
    },
    redrawLine: function() {
      var e, i, s, _i, _results;
      mapJS.removeAll();
      s = parseInt(polylineStack.length * rangeStart / 100);
      e = parseInt(polylineStack.length * rangeEnd / 100);
      _results = [];
      for (i = _i = s; s <= e ? _i <= e : _i >= e; i = s <= e ? ++_i : --_i) {
        _results.push(polylineStack[i].setMap(map));
      }
      return _results;
    }
  };
  fileJS = {
    init: function() {
    },
    draw: function() {
      var color, elm, from, fromTime, index, line, to, toTime, _i, _len, _results;
      color = "";
      from = {};
      to = {};
      fromTime = "";
      toTime = "";
      _results = [];
      for (index = _i = 0, _len = colorData.length; _i < _len; index = ++_i) {
        line = colorData[index];
        elm = line.split(" ");
        fromTime = elm[0];
        toTime = elm[1];
		
		//color = '#';
		//colorをrgb(r,g,b)の形で表現する
        color = "rgb(";

		color += Math.floor(parseFloat(elm[2]));
		color += ',';
		color += Math.floor(parseFloat(elm[3]));
		color += ',';
		color += Math.floor(parseFloat(elm[4]));
		color += ')';
        from = fileJS.getLatlng(fromTime);
        to = fileJS.getLatlng(toTime);
        _results.push(mapJS.drawLine(from, to, color));
      }
      return _results;
    },
    rangeChange: function() {
      rangeStart = fileRangeStart.value;
      rangeEnd = fileRangeEnd.value;
      return mapJS.redrawLine();
    }
  };
  mapJS.init();
  return fileJS.init();
};
