// Generated by CoffeeScript 1.4.0
var log, map, markerArray;
log = console.log.bind(console);
map = "";

markerArray = [];

window.onload = function() {
  rangeStart = 0;
  rangeEnd = 100;
  mapJS = {
    init: function() {
      var latlng, myOptions;
      latlng = new google.maps.LatLng(35.685222, 139.729387);
      myOptions = {
        zoom: 17,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
		disableDefaultUI: true // Eliminate Control UIs
      };
      map = new google.maps.Map(document.getElementById("map"), myOptions);

	  //Iwasawa Add Script
	  // Custumize Style

	  var baseOptions = [{
		featureType:'all',
		elementType:'geometry',
		stylers:[
			{visibility:'on'},
			{hue:'#00040f'},
			{saturation:'-100'},
			{lightness: '-20'},
			{gamma:'0.2'}
		]
	  },{
		featureType:'all',
		elementType:'labels',
		stylers:[
			{visibility:'off'},
		]
	  }];
	  map.setOptions({styles:baseOptions});

    },
    drawLine: function(from, to, color) {
      var lineAry, polyline;
      lineAry = [new google.maps.LatLng(from.lat, from.lng), new google.maps.LatLng(to.lat, to.lng)];
      polyline = new google.maps.Polyline({
        path: lineAry,
        strokeColor: color,
        strokeOpacity: 1.0,
        strokeWeight: 5
      });
      polyline.setMap(map);
      polylineStack.push(polyline);
    },
    redrawLine: function() {
      var e, i, s, _i, _results;
      mapJS.removeAll();
      s = parseInt(polylineStack.length * rangeStart / 100);
      e = parseInt(polylineStack.length * rangeEnd / 100);
      _results = [];
      for (i = _i = s; s <= e ? _i <= e : _i >= e; i = s <= e ? ++_i : --_i) {
        _results.push(polylineStack[i].setMap(map));
      }
      return _results;
    }
  };
  fileJS = {
    init: function() {
    },
    draw: function() {
      var color, elm, from, fromTime, index, line, to, toTime, _i, _len, _results;
      color = "";
      from = {};
      to = {};
      fromTime = "";
      toTime = "";
      _results = [];
      for (index = _i = 0, _len = colorData.length; _i < _len; index = ++_i) {
        line = colorData[index];
        elm = line.split(" ");
        fromTime = elm[0];
        toTime = elm[1];
		
		//color = '#';
		//colorをrgb(r,g,b)の形で表現する
        color = "rgb(";

		color += Math.floor(parseFloat(elm[2]));
		color += ',';
		color += Math.floor(parseFloat(elm[3]));
		color += ',';
		color += Math.floor(parseFloat(elm[4]));
		color += ')';
        from = fileJS.getLatlng(fromTime);
        to = fileJS.getLatlng(toTime);
        _results.push(mapJS.drawLine(from, to, color));
      }
      return _results;
    },
    rangeChange: function() {
      rangeStart = fileRangeStart.value;
      rangeEnd = fileRangeEnd.value;
      return mapJS.redrawLine();
    }
  };
  mapJS.init();
  return fileJS.init();
};
